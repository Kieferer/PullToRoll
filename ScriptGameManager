using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.IO;
using System;
public class ScriptGameManager : MonoBehaviour
{
    public bool IsGameStarted;
    public int NumberOfScore;
    public int NumberOfAllScore;
    public int NumberOfLevel;
    private float NumberOfColorTime;
    private float NumberOfEarnedScoreTime;
    private float NumberOfRebornTime;
    private int NumberOfColor;
    private int[] ScoreOfLevels = {10, 20, 50, 100, 200, 400, 800, 1000, 2000, 3000, 4000, 5000, 10000};
    public GameObject IndicatorOfScore;
    [SerializeField] private GameObject PlayerObject;
    [SerializeField] private GameObject PlatformOrigin;
    [SerializeField] private GameObject PlatformOriginPrefab;
    [SerializeField] private TextMeshProUGUI TextOfFrame;
    [SerializeField] private TextMeshProUGUI TextOfLevel;
    [SerializeField] private TextMeshProUGUI TextOfScore;
    public Material MaterialOfPlatformTop;
    public Material MaterialOfPlatformBottom;
    [SerializeField] private Color[] ColorsOfMaterialMain = {new Color32(10, 0, 204, 255), new Color32(187, 0, 204, 255), new Color32(204, 0, 0, 255), new Color32(204, 100, 2, 255), new Color32(204, 177, 0, 255), new Color32(22, 204, 2, 255), new Color32(0, 204, 190, 255)};
    [SerializeField] private Color[] ColorsOfMaterialSubject = {new Color32(9, 0, 179, 255), new Color32(164, 0, 179, 255), new Color32(179, 0, 0, 255), new Color32(179, 86, 1, 255), new Color32(179, 155, 0, 255), new Color32(20, 179, 1, 255), new Color32(0, 179, 168, 255)};
    [SerializeField] private Color[] ColorsOfCamera = {new Color32(110, 107, 178, 255), new Color32(171, 0, 107, 178), new Color32(178, 107, 107, 255), new Color32(178, 140, 107, 255), new Color32(178, 167, 107, 255), new Color32(115, 178, 107, 255), new Color32(107, 178, 173, 255)};
    public void Start()
    {
        //A változó színek beállítása.
        MaterialOfPlatformTop.color = ColorsOfMaterialMain[5];
        MaterialOfPlatformBottom.color = ColorsOfMaterialSubject[5];
        Camera.main.backgroundColor = ColorsOfCamera[5];
        //A SinglePlayer játékmód pályájának létrehozása.
        PlatformOrigin.GetComponent<MeshRenderer>().material = MaterialOfPlatformTop;
        PlatformOrigin.transform.GetChild(0).GetComponent<MeshRenderer>().material = MaterialOfPlatformBottom;
    }
    public void Update()
    {
        Application.targetFrameRate = 60;
        QualitySettings.vSyncCount = 0;
        //A Materialok és egyébb elemek szineinek állandó változtatása. 
        MaterialOfPlatformTop.color = Color.Lerp(MaterialOfPlatformTop.color, ColorsOfMaterialMain[NumberOfColor], 0.2f * Time.deltaTime);
        MaterialOfPlatformBottom.color = Color.Lerp(MaterialOfPlatformBottom.color, ColorsOfMaterialSubject[NumberOfColor], 0.2f * Time.deltaTime);
        Camera.main.backgroundColor = Color.Lerp(Camera.main.backgroundColor, ColorsOfCamera[NumberOfColor], 0.2f * Time.deltaTime);
        IndicatorOfScore.GetComponent<Image>().color = Color.Lerp(MaterialOfPlatformTop.color, ColorsOfMaterialMain[NumberOfColor], 0.2f * Time.deltaTime);
        //A Materialokon Lerp-pel megjelenített színek váltásáért felelős logika.
        NumberOfColorTime = Mathf.Lerp(NumberOfColorTime, 1f, 0.2f * Time.deltaTime);
        if (NumberOfColorTime > 0.9f)
        {
            NumberOfColor++;
            NumberOfColor = (NumberOfColor >= 6) ? 0 : NumberOfColor;
            NumberOfColorTime = 0;
        }
        //Az akutális FPS-t kiszámító és az eredményt megjelenítő részleg.
        float FloatOfFrame = 1 / Time.unscaledDeltaTime;
        TextOfFrame.text = Mathf.RoundToInt(FloatOfFrame) + "FPS";
        //A Player jelenlegi elért pontjaihoz tartozó számítások és megjelenítések.
        float PercentageOfLevel = (float)NumberOfScore / (float)ScoreOfLevels[NumberOfLevel] * 100;
        float PercentageOfPosition = ((PercentageOfLevel / 100) * 855) - 855;
        IndicatorOfScore.transform.localPosition = Vector4.MoveTowards(IndicatorOfScore.transform.localPosition, new Vector3(PercentageOfPosition, IndicatorOfScore.transform.localPosition.y, IndicatorOfScore.transform.localPosition.z), (100.125f + Vector3.Distance(IndicatorOfScore.transform.localPosition, new Vector3(IndicatorOfScore.transform.localPosition.x + PercentageOfPosition, IndicatorOfScore.transform.localPosition.y, IndicatorOfScore.transform.localPosition.z)))  * Time.deltaTime);
        TextOfLevel.text = NumberOfLevel.ToString();
        TextOfScore.text = NumberOfScore.ToString() + "/" + ScoreOfLevels[NumberOfLevel].ToString();
        if (IsGameStarted)
        {
            //A szintlépés kiszámítása olyankor, amikor nincs maradék.
            if (NumberOfScore == ScoreOfLevels[NumberOfLevel])
            {
                NumberOfScore = 0;
                NumberOfLevel++;
            }
            //A szintlépés kiszámítása olyankor, amikor van maradék.
            if (NumberOfScore != ScoreOfLevels[NumberOfLevel] && NumberOfScore > ScoreOfLevels[NumberOfLevel])
            {
                NumberOfScore -= ScoreOfLevels[NumberOfLevel];
                NumberOfLevel++;
            }
            if (NumberOfScore < 0)
            {
                NumberOfScore = 0;
            }
            //A Player újra teremtéséért felelős részleg.
            if (PlayerObject.GetComponent<ScriptPlayer>().PlayerAlive == false)
            {
                NumberOfRebornTime = Mathf.Lerp(NumberOfRebornTime, 100f, 1f * Time.deltaTime);
                if (NumberOfRebornTime > 98f)
                {
                    NumberOfScore -= NumberOfLevel;
                    NumberOfAllScore -= NumberOfLevel;
                    RebornOfPlayer();
                    NumberOfRebornTime = 0;
                }
            }
            else
            {
                NumberOfRebornTime = 0;
            }
        }
    }
    public void RebornOfPlayer()
    {
        GameObject FirstPlatform = Instantiate(PlatformOriginPrefab, Vector3.zero, Quaternion.identity);
        PlayerObject.GetComponent<ScriptPlayer>().DieAndRebornOfPlayer();
    }
}
