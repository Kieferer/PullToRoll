using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ScriptPlatform : MonoBehaviour
{
    public bool PlatformOrigin;
    public bool PlayerReached;
    private bool PlatfromGenerated;
    public bool PlatfromSpike;
    public bool NextPlatformSpike;
    public int NumberSidesOfPlatform;
    private float DistanceOfPlayer;
    private float SpikeOfPlatformY;
    private GameObject GameManager;
    private GameObject PlayerObject;
    private GameObject PlatformParent;
    [SerializeField] private GameObject PlatformPrefab;
    [SerializeField] private GameObject SpikeOfThisPlatform;
    private bool[] SidesOfPlatform = {false, false, false};
    public void Awake()
    {
        if (!PlayerObject || !GameManager)
        {
            PlayerObject = GameObject.FindWithTag("Player");
            GameManager = GameObject.FindWithTag("GameManager");
        }
    }
    public void Start()
    {
        if (!PlatformOrigin)
        {
            if (Random.Range(0, 100) > GameManager.GetComponent<ScriptGameManager>().ChanceToSpike)
            {
                NextPlatformSpike = true;
            }
            else
            {
                NextPlatformSpike = false;
            }
        }
        //A Platform oldalainak ellenörzése és az ahhoz szükséges változók.
        Vector3[] VectorsOfSides = {Vector3.forward, Vector3.right, Vector3.back};
        for (int NumberOfSide = 0; NumberOfSide < VectorsOfSides.Length; NumberOfSide++)
        {
            if (Physics.Raycast(transform.position, VectorsOfSides[NumberOfSide], 2f))
            {
                SidesOfPlatform[NumberOfSide] = true;
            }
            if (NumberOfSide == 0 || NumberOfSide == 2)
            {
                if (Physics.Raycast(transform.position + VectorsOfSides[NumberOfSide], Vector3.left, 2f))
                {
                    SidesOfPlatform[NumberOfSide] = true;
                }
            }
        }
    }
    public void Update()
    {
        if (GameManager.GetComponent<ScriptGameManager>().GamePaused == false)
        {
            if (PlayerObject)
            {
                //A Platform legenerálása utáni helyre mozgatása.
                if (transform.position.y != 0 && !PlatfromGenerated && PlayerObject.GetComponent<ScriptPlayer>().PlayerAlive)
                {
                    transform.position = Vector3.MoveTowards(transform.position, new Vector3(transform.position.x, 0, transform.position.z), ((4.125f + Mathf.Abs(transform.position.y) * 5) * Time.unscaledDeltaTime));
                }
                //Az új Platform legenerálása/eltüntetése és az ahhoz szükséges számítások.
                DistanceOfPlayer = Vector3.Distance(transform.position, PlayerObject.transform.position);
                if (transform.position.y == 0)
                {
                    if (DistanceOfPlayer < 5f && !PlatfromGenerated)
                    {
                        //Ha a közelsége kevesebb mint 5f és még nem generált korábban Platformot akkor megteszi.
                        NumberSidesOfPlatform = Random.Range(0, 3);
                        if (this.SidesOfPlatform[NumberSidesOfPlatform] == false)
                        {
                            GeneratePlatform(NumberSidesOfPlatform);
                            PlatfromGenerated = true;
                        }
                    }
                    if (SpikeOfThisPlatform != null)
                    {
                        if (PlatfromSpike == true)
                        {
                            if (DistanceOfPlayer > 1f || SpikeOfThisPlatform.transform.localPosition.y > -3.50f)
                            {
                                //A Spike mozgásának irányá-ért felelős részleg.
                                if (SpikeOfThisPlatform.transform.localPosition.y <= -5.8f)
                                {
                                    SpikeOfPlatformY = 0f;
                                }
                                if (SpikeOfThisPlatform.transform.localPosition.y >= -0.2f)
                                {
                                    SpikeOfPlatformY = -6f;
                                }
                            }
                            else
                            {
                                if (SpikeOfThisPlatform.transform.localPosition != new Vector3(SpikeOfThisPlatform.transform.localPosition.x, -6f, SpikeOfThisPlatform.transform.localPosition.z))
                                {
                                    SpikeOfThisPlatform.transform.localPosition = new Vector3(SpikeOfThisPlatform.transform.localPosition.x, -6f, SpikeOfThisPlatform.transform.localPosition.z);
                                }
                            }
                            //A Spike mozgatása.
                            SpikeOfThisPlatform.transform.localPosition = Vector3.MoveTowards(SpikeOfThisPlatform.transform.localPosition, new Vector3(SpikeOfThisPlatform.transform.localPosition.x, SpikeOfPlatformY, SpikeOfThisPlatform.transform.localPosition.z), 2.125f * Time.unscaledDeltaTime);
                        }
                        else
                        {
                            if (SpikeOfThisPlatform.transform.localPosition.y != -6f)
                            {
                                SpikeOfThisPlatform.transform.localPosition = new Vector3(SpikeOfThisPlatform.transform.localPosition.x, -6f, SpikeOfThisPlatform.transform.localPosition.z);
                            }
                        }
                    }
                }
                //Ennek a Platformnak az eltüntetésé-ért felelős részleg.
                if ((DistanceOfPlayer > 3 && PlatfromGenerated && PlayerReached && !PlatformParent) || !PlayerObject.GetComponent<ScriptPlayer>().PlayerAlive)
                {
                    if (transform.position.y != -20)
                    {
                        transform.position = Vector3.MoveTowards(transform.position, new Vector3(transform.position.x, -20, transform.position.z), ((Vector3.Distance(transform.position, PlayerObject.transform.position) / 100) + (4.125f + Mathf.Abs(transform.position.y) * 2) * Time.unscaledDeltaTime));
                    }
                    else
                    {
                        Destroy(this.gameObject);
                    }        
                }
            }
        }
    }
    public void GeneratePlatform(int NumberOfSides)
    {
        Vector3 NextTargetedPosition;
        switch (NumberOfSides)
        {
            //Ebben az esetben a Platformot a jelenlegitől jobbra fogja generálni.
            case 0:
                NextTargetedPosition = (new Vector3(transform.position.x, -20, transform.position.z) + Vector3.forward);
                GameObject Platform0 = Instantiate(PlatformPrefab, NextTargetedPosition, Quaternion.identity);
                Platform0.GetComponent<ScriptPlatform>().PlatfromSpike = this.gameObject.GetComponent<ScriptPlatform>().NextPlatformSpike;
                Platform0.GetComponent<ScriptPlatform>().PlatformParent = this.gameObject;
                Platform0.GetComponent<ScriptPlatform>().enabled = true;
            break;
            //Ebben az esetben a Platformot a jelenlegitől előre fogja generálni.
            case 1:
                NextTargetedPosition = (new Vector3(transform.position.x, -20, transform.position.z) + Vector3.right);
                GameObject Platform1 = Instantiate(PlatformPrefab, NextTargetedPosition, Quaternion.identity);
                Platform1.GetComponent<ScriptPlatform>().PlatfromSpike = this.gameObject.GetComponent<ScriptPlatform>().NextPlatformSpike;
                Platform1.GetComponent<ScriptPlatform>().PlatformParent = this.gameObject;
                Platform1.GetComponent<ScriptPlatform>().enabled = true;
            break;
            //Ebben az esetben a Platformot a jelenlegitől balra fogja generálni.
            case 2:
                NextTargetedPosition = (new Vector3(transform.position.x, -20, transform.position.z) + Vector3.back);
                GameObject Platform2 = Instantiate(PlatformPrefab, NextTargetedPosition, Quaternion.identity);
                Platform2.GetComponent<ScriptPlatform>().PlatfromSpike = this.gameObject.GetComponent<ScriptPlatform>().NextPlatformSpike;
                Platform2.GetComponent<ScriptPlatform>().PlatformParent = this.gameObject;
                Platform2.GetComponent<ScriptPlatform>().enabled = true;
            break;
        }
    }
}
