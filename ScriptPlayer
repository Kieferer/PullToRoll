using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ScriptPlayer : MonoBehaviour
{
    public bool PlayerAlive;
    private bool StillMoving;
    [SerializeField] private Material[] MaterialOfPlayer;
    [SerializeField] private GameObject GameManager;
    [SerializeField] private GameObject PlayerObjectBroken;
    private Vector2 PositionOfFirstTouch;
    private Vector2 PositionOfLastTouch;
    private Vector3[] DirectionsOfRoll = {Vector3.zero, Vector3.zero, Vector3.zero, Vector3.zero};
    public void Start()
    {
        DirectionsOfRoll[0] = (new Vector3(-GetComponent<BoxCollider>().bounds.size.x / 2, -GetComponent<BoxCollider>().bounds.size.y / 2, 0));
        DirectionsOfRoll[1] = (new Vector3(GetComponent<BoxCollider>().bounds.size.x / 2, -GetComponent<BoxCollider>().bounds.size.y / 2, 0));
        DirectionsOfRoll[2] = (new Vector3(0, -GetComponent<BoxCollider>().bounds.size.y / 2, -GetComponent<BoxCollider>().bounds.size.z / 2));
        DirectionsOfRoll[3] = (new Vector3(0, -GetComponent<BoxCollider>().bounds.size.y / 2, GetComponent<BoxCollider>().bounds.size.z / 2));
    }
    public void Update()
    {
        if (GameManager.GetComponent<ScriptGameManager>().GamePaused == false)
        {
            if (!StillMoving && PlayerAlive == true)
            {
                //A PlayerObject irányítása.
                if (Input.touchCount >= 1 && Input.GetTouch(0).phase == TouchPhase.Began)
                {
                    PositionOfFirstTouch = Input.GetTouch(0).position;
                }
                if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Ended)
                {
                    PositionOfLastTouch = Input.GetTouch(0).position;
                    float DifferenceOfX = (PositionOfFirstTouch.x - PositionOfLastTouch.x);
                    float DifferenceOfY = (PositionOfFirstTouch.y - PositionOfLastTouch.y);
                    if (Mathf.Abs(DifferenceOfX) > Mathf.Abs(DifferenceOfY) && Mathf.Abs(DifferenceOfX) != Mathf.Abs(DifferenceOfY))
                    {
                        if (DifferenceOfX > 0)
                        {
                            //Ebben az esteben a PlayerObject jobb oldalra fog forogni.
                            StartCoroutine(MovePlayerObject(DirectionsOfRoll[0]));
                        }
                        if (DifferenceOfX < 0)
                        {
                            //Ebben az esteben a PlayerObject bal oldalra fog forogni.
                            StartCoroutine(MovePlayerObject(DirectionsOfRoll[1]));
                        }
                    }
                    if (Mathf.Abs(DifferenceOfX) < Mathf.Abs(DifferenceOfY) && Mathf.Abs(DifferenceOfX) != Mathf.Abs(DifferenceOfY))
                    {
                        if (DifferenceOfY > 0)
                        {
                            //Ebben az esteben a PlayerObject felfele fog forogni.
                            StartCoroutine(MovePlayerObject(DirectionsOfRoll[2]));
                        }
                        if (DifferenceOfY < 0)
                        {
                            //Ebben az esteben a PlayerObject lefele fog forogni.
                            StartCoroutine(MovePlayerObject(DirectionsOfRoll[3]));
                        }
                    }
                }
            }
        }
    }
    public void OnTriggerEnter(Collider ColliderOfObject)
    {
        if (PlayerAlive)
        {
            if (ColliderOfObject.gameObject.tag == "PlatformSpike")
            {
                DieAndRebornOfPlayer();
            }
        }
    }
    public void InspectorRay()
    {
        //A PlayerObject megállapítja, hogyha Platformra érkezett, akkor milyenre.
        if (!Physics.Raycast(transform.position, Vector3.down, 4f))
        {
            if (PlayerAlive)
            {
                DieAndRebornOfPlayer();
            }
        }
        if (Physics.Raycast(transform.position, Vector3.down, out RaycastHit Platform, 3f))
        {
            Debug.Log("PlayerAlive: " + PlayerAlive + " Tag: " + (Platform.transform.tag = "Platform") + " Reached: " + (Platform.transform.GetComponent<ScriptPlatform>().PlayerReached = false));
            if (PlayerAlive == true)
            {
                //Ebben az esetben egyenesen a Platformal érintkezik a PlayerObject, így tud egyből arra hivatkozni.
                if (Platform.transform.tag == "Platform")
                {
                    //A PlayerObject igény szerint változtatja a Material-t.
                    if (Platform.transform.GetComponent<ScriptPlatform>().NextPlatformSpike == true && Platform.transform.GetComponent<ScriptPlatform>().NumberSidesOfPlatform == 0)
                    {
                        GetComponent<MeshRenderer>().material = MaterialOfPlayer[1];
                    }
                    if (Platform.transform.GetComponent<ScriptPlatform>().NextPlatformSpike == false || Platform.transform.GetComponent<ScriptPlatform>().NumberSidesOfPlatform != 0)
                    {
                        GetComponent<MeshRenderer>().material = MaterialOfPlayer[0];
                    }
                    //A PlayerObject hozzáadja a jutalmat, a játékban elért pontokhoz.
                    if (Platform.transform.GetComponent<ScriptPlatform>().PlayerReached == false && Platform.transform.GetComponent<ScriptPlatform>().PlatfromSpike == false)
                    {
                        GameManager.GetComponent<ScriptGameManager>().AddScore(1);
                        Platform.transform.GetComponent<ScriptPlatform>().PlayerReached = true;
                    }
                    if (Platform.transform.GetComponent<ScriptPlatform>().PlayerReached == false && Platform.transform.GetComponent<ScriptPlatform>().PlatfromSpike == true)
                    {
                        GameManager.GetComponent<ScriptGameManager>().AddScore(2);
                        Platform.transform.GetComponent<ScriptPlatform>().PlayerReached = true;
                    }
                }
                StillMoving = false;
            }
        }
    }
    public void DieAndRebornOfPlayer()
    {
        switch (PlayerAlive)
        {
            case true:
                //Ebben az esetben a PlayerObject elpusztul.
                StillMoving = false;
                PlayerAlive = false;
                GameManager.GetComponent<ScriptGameManager>().NumberOfReborn++;
                GameManager.GetComponent<ScriptGameManager>().PlayerRespawning = true;
                StartCoroutine(GameManager.GetComponent<ScriptGameManager>().SceneBuildForPlayer());
                GetComponent<BoxCollider>().enabled = false;
                GetComponent<MeshRenderer>().enabled = false;
                GameObject PlayerObjectDead = Instantiate(PlayerObjectBroken, transform.position, Quaternion.identity);
                Destroy(PlayerObjectDead, 10);
            break;

            case false:
                //Ebben az esetben a PlayerObject újászület.
                transform.position = new Vector3(0, 0.62f, 0);
                //transform.rotation = Quaternion.identity;
                GetComponent<BoxCollider>().enabled = true;
                GetComponent<MeshRenderer>().enabled = true;
                GetComponent<MeshRenderer>().material = MaterialOfPlayer[0];
                PlayerAlive = true;
            break;
        }
    }
    public IEnumerator MovePlayerObject(Vector3 DirectionForRoll)
    {
        StillMoving = true;
        float RotationOfObject = 0;
        Vector3 CenterOfObject = transform.position + DirectionForRoll;
        Vector3 AxisOfObject = Vector3.Cross(Vector3.up, DirectionForRoll).normalized;
        while (RotationOfObject < 90f)
        {
            transform.RotateAround(CenterOfObject, AxisOfObject, 400 * Time.unscaledDeltaTime);
            RotationOfObject += (400 * Time.unscaledDeltaTime);
            yield return null;
        }
        transform.RotateAround(CenterOfObject, AxisOfObject, 90 - RotationOfObject);
        InspectorRay();
    }
}
