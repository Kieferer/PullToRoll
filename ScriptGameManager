using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.IO;
public class ScriptGameManager : MonoBehaviour
{
    public bool GamePaused;
    public bool RewardForAd;
    public bool PlayerRespawning;
    public float CircleFillAmount;
    public int NumberOfScore;
    public int NumberOfLevel;
    public int NumberOfCircleTime;
    private int IntOfCurrentScore;
    private int IntOfBestScore;
    private int ScoreOfLevel;
    public int ChanceToSpike;
    public int NumberOfReborn;
    public Material[] MaterialOfPlatform;
    [SerializeField] private GameObject PlayServices;
    [SerializeField] private GameObject AdManager;
    [SerializeField] private GameObject ScoreBoard;
    [SerializeField] private GameObject ScoreIndicatorBar;
    [SerializeField] private GameObject PlayerObject;
    [SerializeField] private GameObject PlatformPrefab;
    [SerializeField] private GameObject SceneCutManager;
    [SerializeField] private GameObject GraphicsManager;
    [SerializeField] private GameObject ButtonOfPlayPause;
    [SerializeField] private GameObject AdButton;
    [SerializeField] private TextMeshProUGUI TextOfFrame;
    [SerializeField] private TextMeshProUGUI TextOfLevel;
    [SerializeField] private TextMeshProUGUI TextOfScore;
    [SerializeField] private TextMeshProUGUI TextOfBestScore;
    [SerializeField] private TextMeshProUGUI TextOfCurrentScore;
    [SerializeField] private Sprite[] SpriteOfPlayAndPauseButton;
    public void Awake()
    {
        if (!PlayServices)
        {
            PlayServices = GameObject.FindWithTag("PlayServices");
        }
    }
    public void Start()
    {
        SceneCutManager.SetActive(true);
        NumberOfCircleTime = 3;
        LoadScore();
    }
    public void Update()
    {
        if (GamePaused == false)
        {
            //Az akutális FPS-t kiszámító és az eredményt megjelenítő részleg.
            float FloatOfFrame = 1 / Time.unscaledDeltaTime;
            TextOfFrame.text = Mathf.RoundToInt(FloatOfFrame) + "FPS";
            //A Player jelenlegi elért pontjaihoz tartozó számítások és megjelenítések.
            ScoreOfLevel = (20 * NumberOfLevel);
            ChanceToSpike = (100 - (NumberOfLevel * 2));
            float PercentageOfLevel = (float)NumberOfScore / (float)ScoreOfLevel * 100;
            float PercentageOfPosition = ((PercentageOfLevel / 100) * 800) - 800;
            Vector3.Lerp(ScoreIndicatorBar.transform.localPosition, new Vector3(PercentageOfPosition, 0, 0), (100.125f + Vector3.Distance(ScoreIndicatorBar.transform.localPosition, new Vector3(PercentageOfPosition, 0, 0)))  * Time.deltaTime);
            TextOfLevel.text = NumberOfLevel.ToString();
            TextOfScore.text = NumberOfScore.ToString() + "/" + ScoreOfLevel.ToString();
            //A szintlépés kiszámítása olyankor, amikor nincs maradék.
            if (NumberOfScore == ScoreOfLevel)
            {
                NumberOfScore = 0;
                NumberOfLevel++;
            }
            //A szintlépés kiszámítása olyankor, amikor van maradék.
            if (NumberOfScore != ScoreOfLevel && NumberOfScore > ScoreOfLevel)
            {
                NumberOfScore -= ScoreOfLevel;
                NumberOfLevel++;
            }
            if (NumberOfScore < 0)
            {
                NumberOfScore = 0;
            }
            //Update részlegek az alapján, hogy a Player életben van vagy sem.
            if (PlayerObject.GetComponent<ScriptPlayer>().PlayerAlive == false)
            {
                //Ebben az esetben a Player nincs életben.
                ButtonOfPlayPause.GetComponent<CanvasGroup>().alpha = 0;
                ButtonOfPlayPause.GetComponent<CanvasGroup>().interactable = false;
                ButtonOfPlayPause.GetComponent<CanvasGroup>().blocksRaycasts = false;
                AdButton.GetComponent<CanvasGroup>().alpha = 1;
                AdButton.GetComponent<CanvasGroup>().interactable = true;
                AdButton.GetComponent<CanvasGroup>().blocksRaycasts = true;
            }
            if (PlayerObject.GetComponent<ScriptPlayer>().PlayerAlive == true)
            {
                //Ebben az esetben az Player életben van.
                if (IntOfBestScore < IntOfCurrentScore)
                {
                    IntOfBestScore = IntOfCurrentScore;
                }
                TextOfBestScore.text = IntOfBestScore.ToString();
                TextOfCurrentScore.text = IntOfCurrentScore.ToString();
            }
        }
    }
    public void AddScore(int NumberOfEarnedScore)
    {
        NumberOfScore += NumberOfEarnedScore;
        IntOfCurrentScore++;
    }
    public void LoadScore()
    {
        if (!File.Exists(Application.persistentDataPath + "/kiefer.kieferer"))
        {
            StreamWriter ApplicationWriter = new StreamWriter(Application.persistentDataPath + "/kiefer.kieferer");
            ApplicationWriter.WriteLine(NumberOfLevel.ToString() + "\n" + NumberOfScore.ToString() + "\n" + IntOfBestScore.ToString() + "\n" + "0" + "\n" + "60" + "\n" + "0");
            ApplicationWriter.Close();
        }
        else
        {
            string[] LinesOfMap = System.IO.File.ReadAllLines(Application.persistentDataPath + "/kiefer.kieferer");
            NumberOfLevel = int.Parse(LinesOfMap[0]);
            NumberOfScore = int.Parse(LinesOfMap[1]);
            IntOfBestScore = int.Parse(LinesOfMap[2]);
            GraphicsManager.GetComponent<ScriptGraphicsManager>().TypeOfStyle[0] = int.Parse(LinesOfMap[3]);
            GraphicsManager.GetComponent<ScriptGraphicsManager>().NumberOfFPS = int.Parse(LinesOfMap[4]);
            GraphicsManager.GetComponent<ScriptGraphicsManager>().NumberOfPostProcess = int.Parse(LinesOfMap[5]);
        }
    }
    public void SaveScore()
    {
        StreamWriter ApplicationWriter = new StreamWriter(Application.persistentDataPath + "/kiefer.kieferer");
        ApplicationWriter.WriteLine(NumberOfLevel.ToString() + "\n" + NumberOfScore.ToString() + "\n" + IntOfBestScore.ToString() + "\n" + GraphicsManager.GetComponent<ScriptGraphicsManager>().TypeOfStyle[0].ToString() + "\n" + GraphicsManager.GetComponent<ScriptGraphicsManager>().NumberOfFPS.ToString() + "\n" + GraphicsManager.GetComponent<ScriptGraphicsManager>().NumberOfPostProcess.ToString());
        ApplicationWriter.Close();
        //PlayServices.GetComponent<ScriptPlayServices>().AddScoreToLeaderBoard(IntOfBestScore);
    }
    public IEnumerator SceneBuildForPlayer()
    {
        if (PlayerRespawning == true)
        {
            yield return new WaitForSeconds(1);
            if (NumberOfCircleTime != 0)
            {
                CircleFillAmount += 0.4f;
                NumberOfCircleTime--;
                StartCoroutine(SceneBuildForPlayer());
            }
            if (CircleFillAmount >= 1f)
            {
                PlayerObject.GetComponent<ScriptPlayer>().DieAndRebornOfPlayer();
                GameObject PlatformOrigin = Instantiate(PlatformPrefab, Vector3.zero, Quaternion.identity);
                PlatformOrigin.GetComponent<ScriptPlatform>().PlayerReached = true;
                PlatformOrigin.GetComponent<ScriptPlatform>().PlatformOrigin = true;
                PlatformOrigin.GetComponent<ScriptPlatform>().enabled = true;
                //A UI beállítása az.
                ButtonOfPlayPause.GetComponent<CanvasGroup>().alpha = 1;
                ButtonOfPlayPause.GetComponent<CanvasGroup>().interactable = true;
                ButtonOfPlayPause.GetComponent<CanvasGroup>().blocksRaycasts = true;
                AdButton.GetComponent<CanvasGroup>().alpha = 0;
                AdButton.GetComponent<CanvasGroup>().interactable = false;
                AdButton.GetComponent<CanvasGroup>().blocksRaycasts = false;
                //A Score beállítása díj alapján.
                switch (RewardForAd)
                {
                    case false:
                        IntOfCurrentScore = 0;
                        if (NumberOfReborn >= 3)
                        {
                            AdManager.GetComponent<ScriptAdManager>().OnUnityAdsReady("Interstitial");
                            NumberOfReborn = 0;
                        }
                    break;
                    case true:
                        RewardForAd = false;
                    break;
                }
                //A Player újászületésének vége.
                SaveScore();
                PlayerRespawning = false;
            }
        }
    }
    public IEnumerator ButtonOfPlayAndPause()
    {
        switch (GamePaused)
        {
            case false:
                GamePaused = true;
                ButtonOfPlayPause.GetComponent<Image>().sprite = SpriteOfPlayAndPauseButton[1];
            break;
            case true:
                yield return new WaitForSeconds(0.2f);
                GamePaused = false;
                ButtonOfPlayPause.GetComponent<Image>().sprite = SpriteOfPlayAndPauseButton[0];
            break;
        }
    }
}
